import curses as cu
from curses import wrapper

def main(stdscr):
    cu.use_default_colors()
    '''
    Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number -1. 
    '''
    cu.curs_set(0)

    print(cu.COLORS)
    print(cu.COLOR_PAIRS)

    # init 16 color
    for i in range(1, 16):
        cu.init_pair(i, i, -1)

    stdscr.clear()
    for i in range(16):
        stdscr.addstr(2*i, 0, "%2d hello world\n"%(i), cu.color_pair(i))
        stdscr.addstr(2*i+1, 0, "%2d hello world\n"%(i), cu.A_REVERSE|cu.color_pair(i))
    stdscr.refresh()
    stdscr.getkey()

    # The terminal need to support 256 color. e.g. set $TERM=xterm-256color
    if cu.COLORS==256:
        for i in range(1, 256):
            cu.init_pair(i, i, -1)
        
        stdscr.clear()
        for i in range(256):
            stdscr.addstr(str(i), cu.color_pair(i))
        stdscr.refresh()
        stdscr.getkey()

        # print the origin color rgb mapping
        stdscr.clear()
        for clr_num in range(cu.COLORS):
            r, g, b = cu.color_content(clr_num)
            stdscr.addstr("%d:%s,%s,%s "%(clr_num, hex(int(r*0.255))[2:], hex(int(g*0.255))[2:], hex(int(b*0.255))[2:]))
        stdscr.refresh()
        stdscr.getkey()

        # test one color
        cu.init_pair(16, 194, -1)
        stdscr.addstr('\nHello', cu.color_pair(16))
        stdscr.refresh()
        stdscr.getkey()

        # The setting below map clr_num to RGB value directly
        # git bash can't only modify 16 color
        # if cu.can_change_color():
        #     '''
        #     This function is a no-op on most terminals; it is active only if can_change_color() returns True.
        #     '''
        #     old_clr_rgb_dic = {}
            
        #     for clr_num in range(256):
        #         # divide one byte to 3, 3, 2 as the component of r, g, b
        #         br, bg, bb = (clr_num&0xe0)>>5, (clr_num&0x1c)>>2, clr_num&0x03
        #         # map to 1000
        #         r, g, b = int(br/8*1000), int(bg/8*1000), int(bb/4*1000)

        #         old_clr_rgb_dic[clr_num] = cu.color_content(clr_num)
        #         cu.init_color(clr_num, r, g, b)

        #     stdscr.refresh()
        #     stdscr.getkey()

        #     #restore the color setting
        #     for clr_num in range(256):
        #         r, g, b = old_clr_rgb_dic[clr_num]
        #         cu.init_color(clr_num, r, g, b)

        #     stdscr.refresh()
        #     stdscr.getkey()


if __name__ == "__main__":
    wrapper(main)
    '''
    1. If the application raises an exception, this function will restore
        the terminal to a sane state before re-raising the exception and 
        generating a traceback. 
    2. Before calling func, wrapper():
        1. turns on cbreak mode
        2. turns off echo
        3. enables the terminal keypad
        4. initializes colors if the terminal has color support.
    3. On exit (whether normally or by exception) it restores cooked mode,
         turns on echo, and disables the terminal keypad.

    tips:
    1. raw: no line buffer, and do'nt deal with special ASCII character like Ctrl-C
    2. cbreak: no line buffer, but deal with special ASCII character
        In cbreak mode (sometimes called “rare” mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program.
        cooked mode have line buffer, and deal with special ascii character
    3. keypad: the left arrow on keyboad is a escape sequences (many character)
        window.keypad(): If flag is True, escape sequences generated by some keys (keypad, function keys) will be interpreted by curses. If flag is False, escape sequences will be left as is in the input stream.
    '''
    '''
    window.getch():
        Get a character. Note that the integer returned does not have to be in ASCII range: function keys, keypad keys and so on are represented by numbers higher than 255. In no-delay mode, return -1 if there is no input, otherwise wait until a key is pressed.
    window.getkey():
        Get a character, returning a string instead of an integer, as getch() does.
    '''
    '''
    start_color(): 
        initializes eight basic colors (black, red, green, yellow, blue, magenta, cyan, and white), and two global variables in the curses module, COLORS and COLOR_PAIRS, containing the maximum number of colors and color-pairs the terminal can support. It also restores the colors on the terminal to the values they had when the terminal was just turned on.
    '''

    '''
    256-color:
        16 high color + 6*6*6 + 24 grey

        0x00,   0x5f,   0x87,   0xaf,   0xd7,   0xff
        0       95      135     175     215     255
    '''